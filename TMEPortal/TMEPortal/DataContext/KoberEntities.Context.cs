//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMEPortal.DataContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class KoberEntities : DbContext
    {
        public KoberEntities()
            : base("name=KoberEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ArbolMenu> ArbolMenu { get; set; }
        public virtual DbSet<CteEnviarA> CteEnviarA { get; set; }
        public virtual DbSet<Cte> Cte { get; set; }
        public virtual DbSet<PedidoMedidasEstandar> PedidoMedidasEstandar { get; set; }
        public virtual DbSet<CarritoEncabezado> CarritoEncabezado { get; set; }
        public virtual DbSet<Art> Art { get; set; }
        public virtual DbSet<CarritoDetalle> CarritoDetalle { get; set; }
    
        public virtual ObjectResult<sp_GetClientes_Result> sp_GetClientes(string clienteID)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetClientes_Result>("sp_GetClientes", clienteIDParameter);
        }
    
        public virtual ObjectResult<sp_GetSucursalesCliente_Result> sp_GetSucursalesCliente(string clienteID)
        {
            var clienteIDParameter = clienteID != null ?
                new ObjectParameter("ClienteID", clienteID) :
                new ObjectParameter("ClienteID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetSucursalesCliente_Result>("sp_GetSucursalesCliente", clienteIDParameter);
        }
    
        public virtual ObjectResult<sp_GetColoresXClasificacion_Result> sp_GetColoresXClasificacion(string clasificacion)
        {
            var clasificacionParameter = clasificacion != null ?
                new ObjectParameter("clasificacion", clasificacion) :
                new ObjectParameter("clasificacion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetColoresXClasificacion_Result>("sp_GetColoresXClasificacion", clasificacionParameter);
        }
    
        public virtual ObjectResult<GetPropiedadesProductoNodo_Result> GetPropiedadesProductoNodo(Nullable<System.Guid> nodo, string propiedad)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            var propiedadParameter = propiedad != null ?
                new ObjectParameter("propiedad", propiedad) :
                new ObjectParameter("propiedad", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropiedadesProductoNodo_Result>("GetPropiedadesProductoNodo", nodoParameter, propiedadParameter);
        }
    
        public virtual ObjectResult<GetPropProductoNodo_Result> GetPropProductoNodo(Nullable<System.Guid> nodo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropProductoNodo_Result>("GetPropProductoNodo", nodoParameter);
        }
    
        public virtual ObjectResult<GetPropProductoNodo1_Result> GetPropProductoNodo1(Nullable<System.Guid> nodo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPropProductoNodo1_Result>("GetPropProductoNodo1", nodoParameter);
        }
    
        public virtual ObjectResult<Get_ClienteDet_Result> Get_ClienteDet(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ClienteDet_Result>("Get_ClienteDet", clienteParameter);
        }
    
        public virtual int spRegistrarVentaDetalle(Nullable<int> iD, Nullable<double> renglon, string articulo, string unidad, string almacen, string renglonTipo, Nullable<double> cantidad, Nullable<double> cantidadInventario, Nullable<decimal> precio, Nullable<double> impuesto1, Nullable<double> impuesto2, Nullable<double> impuesto3, Nullable<decimal> descuentoLinea, string descuentoTipo, string descripcionExtra, string opcion, Nullable<int> sucursalEmpresa, Nullable<int> renglonId)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var renglonParameter = renglon.HasValue ?
                new ObjectParameter("Renglon", renglon) :
                new ObjectParameter("Renglon", typeof(double));
    
            var articuloParameter = articulo != null ?
                new ObjectParameter("Articulo", articulo) :
                new ObjectParameter("Articulo", typeof(string));
    
            var unidadParameter = unidad != null ?
                new ObjectParameter("Unidad", unidad) :
                new ObjectParameter("Unidad", typeof(string));
    
            var almacenParameter = almacen != null ?
                new ObjectParameter("Almacen", almacen) :
                new ObjectParameter("Almacen", typeof(string));
    
            var renglonTipoParameter = renglonTipo != null ?
                new ObjectParameter("RenglonTipo", renglonTipo) :
                new ObjectParameter("RenglonTipo", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(double));
    
            var cantidadInventarioParameter = cantidadInventario.HasValue ?
                new ObjectParameter("CantidadInventario", cantidadInventario) :
                new ObjectParameter("CantidadInventario", typeof(double));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var impuesto1Parameter = impuesto1.HasValue ?
                new ObjectParameter("Impuesto1", impuesto1) :
                new ObjectParameter("Impuesto1", typeof(double));
    
            var impuesto2Parameter = impuesto2.HasValue ?
                new ObjectParameter("Impuesto2", impuesto2) :
                new ObjectParameter("Impuesto2", typeof(double));
    
            var impuesto3Parameter = impuesto3.HasValue ?
                new ObjectParameter("Impuesto3", impuesto3) :
                new ObjectParameter("Impuesto3", typeof(double));
    
            var descuentoLineaParameter = descuentoLinea.HasValue ?
                new ObjectParameter("DescuentoLinea", descuentoLinea) :
                new ObjectParameter("DescuentoLinea", typeof(decimal));
    
            var descuentoTipoParameter = descuentoTipo != null ?
                new ObjectParameter("DescuentoTipo", descuentoTipo) :
                new ObjectParameter("DescuentoTipo", typeof(string));
    
            var descripcionExtraParameter = descripcionExtra != null ?
                new ObjectParameter("DescripcionExtra", descripcionExtra) :
                new ObjectParameter("DescripcionExtra", typeof(string));
    
            var opcionParameter = opcion != null ?
                new ObjectParameter("Opcion", opcion) :
                new ObjectParameter("Opcion", typeof(string));
    
            var sucursalEmpresaParameter = sucursalEmpresa.HasValue ?
                new ObjectParameter("SucursalEmpresa", sucursalEmpresa) :
                new ObjectParameter("SucursalEmpresa", typeof(int));
    
            var renglonIdParameter = renglonId.HasValue ?
                new ObjectParameter("RenglonId", renglonId) :
                new ObjectParameter("RenglonId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegistrarVentaDetalle", iDParameter, renglonParameter, articuloParameter, unidadParameter, almacenParameter, renglonTipoParameter, cantidadParameter, cantidadInventarioParameter, precioParameter, impuesto1Parameter, impuesto2Parameter, impuesto3Parameter, descuentoLineaParameter, descuentoTipoParameter, descripcionExtraParameter, opcionParameter, sucursalEmpresaParameter, renglonIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> spRegistrarVentaEncabezado(string empresa, string mov, string usuario, string almacen, string moneda, Nullable<double> tipoCambio, string descuento, Nullable<double> descuentoGlobal, string cliente, string formaEnvio, string condicion, string proyecto, string concepto, Nullable<int> uEN, string agente, Nullable<int> enviarA, string comentarios, Nullable<System.DateTime> fechaRequerida, string referencia, string ordenCompra, Nullable<int> sucursalEmpresa, string listaPreciosEsp)
        {
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            var movParameter = mov != null ?
                new ObjectParameter("Mov", mov) :
                new ObjectParameter("Mov", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var almacenParameter = almacen != null ?
                new ObjectParameter("Almacen", almacen) :
                new ObjectParameter("Almacen", typeof(string));
    
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            var tipoCambioParameter = tipoCambio.HasValue ?
                new ObjectParameter("TipoCambio", tipoCambio) :
                new ObjectParameter("TipoCambio", typeof(double));
    
            var descuentoParameter = descuento != null ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(string));
    
            var descuentoGlobalParameter = descuentoGlobal.HasValue ?
                new ObjectParameter("DescuentoGlobal", descuentoGlobal) :
                new ObjectParameter("DescuentoGlobal", typeof(double));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            var formaEnvioParameter = formaEnvio != null ?
                new ObjectParameter("FormaEnvio", formaEnvio) :
                new ObjectParameter("FormaEnvio", typeof(string));
    
            var condicionParameter = condicion != null ?
                new ObjectParameter("Condicion", condicion) :
                new ObjectParameter("Condicion", typeof(string));
    
            var proyectoParameter = proyecto != null ?
                new ObjectParameter("Proyecto", proyecto) :
                new ObjectParameter("Proyecto", typeof(string));
    
            var conceptoParameter = concepto != null ?
                new ObjectParameter("Concepto", concepto) :
                new ObjectParameter("Concepto", typeof(string));
    
            var uENParameter = uEN.HasValue ?
                new ObjectParameter("UEN", uEN) :
                new ObjectParameter("UEN", typeof(int));
    
            var agenteParameter = agente != null ?
                new ObjectParameter("Agente", agente) :
                new ObjectParameter("Agente", typeof(string));
    
            var enviarAParameter = enviarA.HasValue ?
                new ObjectParameter("EnviarA", enviarA) :
                new ObjectParameter("EnviarA", typeof(int));
    
            var comentariosParameter = comentarios != null ?
                new ObjectParameter("Comentarios", comentarios) :
                new ObjectParameter("Comentarios", typeof(string));
    
            var fechaRequeridaParameter = fechaRequerida.HasValue ?
                new ObjectParameter("FechaRequerida", fechaRequerida) :
                new ObjectParameter("FechaRequerida", typeof(System.DateTime));
    
            var referenciaParameter = referencia != null ?
                new ObjectParameter("Referencia", referencia) :
                new ObjectParameter("Referencia", typeof(string));
    
            var ordenCompraParameter = ordenCompra != null ?
                new ObjectParameter("OrdenCompra", ordenCompra) :
                new ObjectParameter("OrdenCompra", typeof(string));
    
            var sucursalEmpresaParameter = sucursalEmpresa.HasValue ?
                new ObjectParameter("SucursalEmpresa", sucursalEmpresa) :
                new ObjectParameter("SucursalEmpresa", typeof(int));
    
            var listaPreciosEspParameter = listaPreciosEsp != null ?
                new ObjectParameter("ListaPreciosEsp", listaPreciosEsp) :
                new ObjectParameter("ListaPreciosEsp", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("spRegistrarVentaEncabezado", empresaParameter, movParameter, usuarioParameter, almacenParameter, monedaParameter, tipoCambioParameter, descuentoParameter, descuentoGlobalParameter, clienteParameter, formaEnvioParameter, condicionParameter, proyectoParameter, conceptoParameter, uENParameter, agenteParameter, enviarAParameter, comentariosParameter, fechaRequeridaParameter, referenciaParameter, ordenCompraParameter, sucursalEmpresaParameter, listaPreciosEspParameter);
        }
    
        public virtual ObjectResult<string> GetLargoProductoNodo(Nullable<System.Guid> nodo, string tMEColor, string tipo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            var tMEColorParameter = tMEColor != null ?
                new ObjectParameter("TMEColor", tMEColor) :
                new ObjectParameter("TMEColor", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetLargoProductoNodo", nodoParameter, tMEColorParameter, tipoParameter);
        }
    
        public virtual ObjectResult<string> GetAnchoProductoNodo(Nullable<System.Guid> nodo, string tMEColor, string tipo, string largo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            var tMEColorParameter = tMEColor != null ?
                new ObjectParameter("TMEColor", tMEColor) :
                new ObjectParameter("TMEColor", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("tipo", tipo) :
                new ObjectParameter("tipo", typeof(string));
    
            var largoParameter = largo != null ?
                new ObjectParameter("Largo", largo) :
                new ObjectParameter("Largo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAnchoProductoNodo", nodoParameter, tMEColorParameter, tipoParameter, largoParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> Get_TipoDeCambio(string moneda)
        {
            var monedaParameter = moneda != null ?
                new ObjectParameter("Moneda", moneda) :
                new ObjectParameter("Moneda", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("Get_TipoDeCambio", monedaParameter);
        }
    
        public virtual ObjectResult<sp_GetPedidosCliente_Result> sp_GetPedidosCliente(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPedidosCliente_Result>("sp_GetPedidosCliente", clienteParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> sp_ValidaCliente(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("sp_ValidaCliente", clienteParameter);
        }
    
        public virtual ObjectResult<GetArticuloExcel_Result> GetArticuloExcel(string articulo)
        {
            var articuloParameter = articulo != null ?
                new ObjectParameter("Articulo", articulo) :
                new ObjectParameter("Articulo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetArticuloExcel_Result>("GetArticuloExcel", articuloParameter);
        }
    
        public virtual ObjectResult<GetColoresMedidasEstandar_Result1> GetColoresMedidasEstandar(Nullable<System.Guid> nodo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetColoresMedidasEstandar_Result1>("GetColoresMedidasEstandar", nodoParameter);
        }
    
        public virtual ObjectResult<sp_GetEqArtGen_Result2> sp_GetEqArtGen(string linea, string color, string descripcion, Nullable<int> cb240, Nullable<int> cb300, Nullable<int> cb360, Nullable<int> ba240, Nullable<int> ba360, Nullable<int> ba90)
        {
            var lineaParameter = linea != null ?
                new ObjectParameter("linea", linea) :
                new ObjectParameter("linea", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cb240Parameter = cb240.HasValue ?
                new ObjectParameter("cb240", cb240) :
                new ObjectParameter("cb240", typeof(int));
    
            var cb300Parameter = cb300.HasValue ?
                new ObjectParameter("cb300", cb300) :
                new ObjectParameter("cb300", typeof(int));
    
            var cb360Parameter = cb360.HasValue ?
                new ObjectParameter("cb360", cb360) :
                new ObjectParameter("cb360", typeof(int));
    
            var ba240Parameter = ba240.HasValue ?
                new ObjectParameter("ba240", ba240) :
                new ObjectParameter("ba240", typeof(int));
    
            var ba360Parameter = ba360.HasValue ?
                new ObjectParameter("ba360", ba360) :
                new ObjectParameter("ba360", typeof(int));
    
            var ba90Parameter = ba90.HasValue ?
                new ObjectParameter("ba90", ba90) :
                new ObjectParameter("ba90", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEqArtGen_Result2>("sp_GetEqArtGen", lineaParameter, colorParameter, descripcionParameter, cb240Parameter, cb300Parameter, cb360Parameter, ba240Parameter, ba360Parameter, ba90Parameter);
        }
    
        public virtual int GetColorProductoNodo(Nullable<System.Guid> nodo, string propiedad, string tipo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            var propiedadParameter = propiedad != null ?
                new ObjectParameter("propiedad", propiedad) :
                new ObjectParameter("propiedad", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetColorProductoNodo", nodoParameter, propiedadParameter, tipoParameter);
        }
    
        public virtual int SetCantCarritoDetalle(Nullable<int> id, Nullable<int> cantidad, Nullable<double> renglon)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var renglonParameter = renglon.HasValue ?
                new ObjectParameter("Renglon", renglon) :
                new ObjectParameter("Renglon", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetCantCarritoDetalle", idParameter, cantidadParameter, renglonParameter);
        }
    
        public virtual int SetElimnaCarritoDetalle(Nullable<int> id, Nullable<double> renglon)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var renglonParameter = renglon.HasValue ?
                new ObjectParameter("Renglon", renglon) :
                new ObjectParameter("Renglon", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetElimnaCarritoDetalle", idParameter, renglonParameter);
        }
    
        public virtual int SetOCCarrito(Nullable<int> id, string oc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var ocParameter = oc != null ?
                new ObjectParameter("Oc", oc) :
                new ObjectParameter("Oc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetOCCarrito", idParameter, ocParameter);
        }
    
        public virtual ObjectResult<spGetEncabezadoCarrito_Result> spGetEncabezadoCarrito(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEncabezadoCarrito_Result>("spGetEncabezadoCarrito", clienteParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_SetCarritoEncabezado(string cliente, string nombre, string condicion, string descuento)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var condicionParameter = condicion != null ?
                new ObjectParameter("condicion", condicion) :
                new ObjectParameter("condicion", typeof(string));
    
            var descuentoParameter = descuento != null ?
                new ObjectParameter("descuento", descuento) :
                new ObjectParameter("descuento", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_SetCarritoEncabezado", clienteParameter, nombreParameter, condicionParameter, descuentoParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> spVerLimiteCreditoMN(string cliente, string empresa)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("Empresa", empresa) :
                new ObjectParameter("Empresa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("spVerLimiteCreditoMN", clienteParameter, empresaParameter);
        }
    
        public virtual ObjectResult<Nullable<double>> spwSaldoActualCteTME(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("spwSaldoActualCteTME", clienteParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> spAfectarMov(Nullable<int> id, string accion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var accionParameter = accion != null ?
                new ObjectParameter("Accion", accion) :
                new ObjectParameter("Accion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("spAfectarMov", idParameter, accionParameter);
        }
    
        public virtual ObjectResult<string> spGetMovIDPedido(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spGetMovIDPedido", idParameter);
        }
    
        public virtual ObjectResult<spPEdidoAfectado_Result2> spPEdidoAfectado(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPEdidoAfectado_Result2>("spPEdidoAfectado", idParameter);
        }
    
        public virtual ObjectResult<GetArticulo_Result5> GetArticulo(string tipo, string color, string ancho, string largo, string cLASIFICAICON, string lado, string tapa)
        {
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var colorParameter = color != null ?
                new ObjectParameter("Color", color) :
                new ObjectParameter("Color", typeof(string));
    
            var anchoParameter = ancho != null ?
                new ObjectParameter("Ancho", ancho) :
                new ObjectParameter("Ancho", typeof(string));
    
            var largoParameter = largo != null ?
                new ObjectParameter("Largo", largo) :
                new ObjectParameter("Largo", typeof(string));
    
            var cLASIFICAICONParameter = cLASIFICAICON != null ?
                new ObjectParameter("CLASIFICAICON", cLASIFICAICON) :
                new ObjectParameter("CLASIFICAICON", typeof(string));
    
            var ladoParameter = lado != null ?
                new ObjectParameter("Lado", lado) :
                new ObjectParameter("Lado", typeof(string));
    
            var tapaParameter = tapa != null ?
                new ObjectParameter("Tapa", tapa) :
                new ObjectParameter("Tapa", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetArticulo_Result5>("GetArticulo", tipoParameter, colorParameter, anchoParameter, largoParameter, cLASIFICAICONParameter, ladoParameter, tapaParameter);
        }
    
        public virtual ObjectResult<sp_GetFacturasPorPagarCliente_Result> sp_GetFacturasPorPagarCliente(string cliente, Nullable<System.DateTime> fEchaD, Nullable<System.DateTime> fEchaA)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            var fEchaDParameter = fEchaD.HasValue ?
                new ObjectParameter("FEchaD", fEchaD) :
                new ObjectParameter("FEchaD", typeof(System.DateTime));
    
            var fEchaAParameter = fEchaA.HasValue ?
                new ObjectParameter("FEchaA", fEchaA) :
                new ObjectParameter("FEchaA", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFacturasPorPagarCliente_Result>("sp_GetFacturasPorPagarCliente", clienteParameter, fEchaDParameter, fEchaAParameter);
        }
    
        public virtual ObjectResult<sp_GetFacturasxPagarClienteDet_Result> sp_GetFacturasxPagarClienteDet(Nullable<int> ventaId)
        {
            var ventaIdParameter = ventaId.HasValue ?
                new ObjectParameter("VentaId", ventaId) :
                new ObjectParameter("VentaId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetFacturasxPagarClienteDet_Result>("sp_GetFacturasxPagarClienteDet", ventaIdParameter);
        }
    
        public virtual ObjectResult<GetpedidosCliente_Result> GetpedidosCliente(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetpedidosCliente_Result>("GetpedidosCliente", clienteParameter);
        }
    
        public virtual int spEliminarCarrito(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spEliminarCarrito", idParameter);
        }
    
        public virtual ObjectResult<GetColorProductoNodo1_Result> GetColorProductoNodo1(Nullable<System.Guid> nodo, string propiedad, string tipo, Nullable<bool> estilo)
        {
            var nodoParameter = nodo.HasValue ?
                new ObjectParameter("nodo", nodo) :
                new ObjectParameter("nodo", typeof(System.Guid));
    
            var propiedadParameter = propiedad != null ?
                new ObjectParameter("propiedad", propiedad) :
                new ObjectParameter("propiedad", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            var estiloParameter = estilo.HasValue ?
                new ObjectParameter("Estilo", estilo) :
                new ObjectParameter("Estilo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetColorProductoNodo1_Result>("GetColorProductoNodo1", nodoParameter, propiedadParameter, tipoParameter, estiloParameter);
        }
    
        public virtual int sp_SetCarritoDetalle(Nullable<int> id, string articulo, Nullable<int> cantidad, string cliente, Nullable<double> renglon, string descripcion)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var articuloParameter = articulo != null ?
                new ObjectParameter("Articulo", articulo) :
                new ObjectParameter("Articulo", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var clienteParameter = cliente != null ?
                new ObjectParameter("cliente", cliente) :
                new ObjectParameter("cliente", typeof(string));
    
            var renglonParameter = renglon.HasValue ?
                new ObjectParameter("renglon", renglon) :
                new ObjectParameter("renglon", typeof(double));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SetCarritoDetalle", idParameter, articuloParameter, cantidadParameter, clienteParameter, renglonParameter, descripcionParameter);
        }
    
        public virtual ObjectResult<GetDetallePedido_Result> GetDetallePedido(Nullable<int> pedido)
        {
            var pedidoParameter = pedido.HasValue ?
                new ObjectParameter("Pedido", pedido) :
                new ObjectParameter("Pedido", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDetallePedido_Result>("GetDetallePedido", pedidoParameter);
        }
    
        public virtual ObjectResult<spGetDetalleCarrito_Result> spGetDetalleCarrito(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDetalleCarrito_Result>("spGetDetalleCarrito", idParameter);
        }
    
        public virtual ObjectResult<sp_GetPedidosPendientesPorCliente_Result2> sp_GetPedidosPendientesPorCliente(string cliente)
        {
            var clienteParameter = cliente != null ?
                new ObjectParameter("Cliente", cliente) :
                new ObjectParameter("Cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPedidosPendientesPorCliente_Result2>("sp_GetPedidosPendientesPorCliente", clienteParameter);
        }
    }
}
